{{define "gametypes"}}
    <script>
        class Position {
            constructor(X, Y) {
                this.X = X;
                this.Y = Y;
            }
        }
        class Turret {
            constructor(ID, Level, Position) {
                this.ID = ID;
                this.Level = Level;
                this.Position = Position;
            }
        }

        class Ship {
            constructor(ID, Level, Crew) {
                this.ID = ID;
                this.Level = Level;
                this.Crew = Crew;
            }
        }

        class Base {
            constructor(Owner, Power, Water, Metal, Fuel, Planets, Turrets, Strength) {
                this.Owner = Owner;
                this.Power = Power;
                this.Water = Water;
                this.Metal = Metal;
                this.Fuel = Fuel;
                this.Planets = Planets;
                this.Turrets = Turrets;
                this.Strength = Strength;
            }
            static getTurretByID(base, iden) {
                for (const turret of base.Turrets) {
                    if(turret.ID === iden) {
                        return turret;
                    }
                }
                return null;
            }
        }

        class Player {
            constructor(HasTrained, Username, Ships, Base) {
                this.HasTrained = HasTrained;
                this.Username = Username;
                this.Ships = Ships;
                this.Base = Base;
            }
            static getShipByID(player, iden) {
                for (const ship of player.Ships) {
                    if(ship.ID === iden) {
                        return ship;
                    }
                }
                return null;
            }
        }

        class Raid {
            constructor(ID, Raider, Target, Fleet) {
                this.ID = ID;
                this.Raider = Raider;
                this.Target = Target;
                this.Fleet = Fleet;
            }
        }
    </script>
{{end}}

{{define "gameAJAX"}}
    <script>
        // command must end with a separator ("|") for type to be parsed and sent
        // if command ends with pipe type should not be undefined or null
        function gameAjax(command, type, func) {
            var xmlRequest = new XMLHttpRequest();
            xmlRequest.open('POST', '/webgame/', true);
            xmlRequest.addEventListener('readystatechange', function(){
                if(xmlRequest.readyState === XMLHttpRequest.DONE && xmlRequest.status === 200) {
                    var res = xmlRequest.responseText;
                    func(res);
                    return true;
                }
            });
            xmlRequest.send(command + (command.endsWith("|") ? JSON.stringify(type) : ""));
        }
    </script>
{{end}}